# NanoMQ Configuration 0.18.0

# #============================================================
# # NanoMQ Broker
# #============================================================

mqtt {
	property_size = 32
	max_packet_size = 255MB
	max_mqueue_len = 2048
	retry_interval = 10s
	keepalive_multiplier = 1.25

	# Three of below, unsupported now
	max_inflight_window = 2048
	max_awaiting_rel = 10s
	await_rel_timeout = 10s
}

listeners.tcp {
	bind = "0.0.0.0:1883"
}

# listeners.ssl {
#	bind = "0.0.0.0:8883"
#	keyfile = "/etc/certs/key.pem"
#	certfile = "/etc/certs/cert.pem"
#	cacertfile = "/etc/certs/cacert.pem"
#	verify_peer = false
#	fail_if_no_peer_cert = false
# }

http_server {
	port = 8081
	limit_conn = 2
	username = admin
	password = public
	auth_type = no_auth
}

log {
	to = [file, console]
	level = warn
	dir = "./log"
	file = "nanomq.log"
	rotation {
		size = 10MB
		count = 5
	}
}

auth {
	allow_anonymous = true
	no_match = allow
	deny_action = ignore

	cache = {
		max_size = 32
		ttl = 1m
	}

}
# #====================================================================
# # MQTT Broker Bridge
# #====================================================================

bridges.mqtt.emqx1 {
	server = "mqtt-tcp://broker.emqx.io:1883"
	proto_ver = 4
	keepalive = 60s
	backoff_max = 60s
	clean_start = false
	username = admin
	password = public
	forwards = [
		{
			remote_topic = ""
			local_topic = "ecp/#"
		}
	]
	subscription = [
		{
			remote_topic = "agent/#"
			# # This is for Topic reflection, if you want the vanila way:
			# # Leave `local_topic=""` to preserve the original topic in msg
			# # Value: String
			local_topic = ""
			qos = 1
		}
	]
	max_parallel_processes = 2
	max_send_queue_len = 32
	max_recv_queue_len = 128
}

bridges.mqtt.cache {
	disk_cache_size = 102400
	flush_mem_threshold = 100
	resend_interval = 5000
}

webhook {
    url = "http://127.0.0.1:14260/api/sdv-flow/webhook_trigger"
    headers.content-type = "application/json"
    body.encoding = plain
    pool_size = 32

    events = [
        {
            event = "on_client_connack"
        }
    ]
}

# #====================================================================
# # Exchange configuration for Embedded Messaging Queue
# #====================================================================
# # Initalize multiple MQ exchanger by giving them different name (mq1)
exchange_client.mq1 {
	# # Currently NanoMQ only support one MQ object. URL shall be exactly same.
	exchange_url = "tcp://127.0.0.1:10000"
	# # exchanges contains multiple MQ exchanger
	limit_frequency = 5
	exchange {
		# # MQTT Topic for filtering messages and saving to queue
		topic = "canudp",
		# # MQ name
		name = "exchange_no1",
		streamType = 1,
		# # MQ category. Only support Ringbus for now
		ringbus = {
			# # ring buffer name
			name = "ringbus",
			# # max length of ring buffer (msg count)
			cap = 1000,
			# #  0: RB_FULL_NONE: When the ringbus is full, no action is taken and the message enqueue fail
			# #  1: RB_FULL_DROP: When the ringbus is full, the data in the ringbus is discarded
			# #  2: RB_FULL_RETURN: When the ringbus is full, the data in the ringbus is taken out and returned to the aio
			# #  3: RB_FULL_FILE: When the ringbus is full, the data in the ringbus is written to the file
			#
			# # Value: 0-4
			# # Default: 0
			# # Note: Sdv flow is only applicable to RB_FULL_RETURN(2)
			fullOp = 2
		}
	}
}

# #====================================================================
# # Parquet configuration (Apply to Exchange/Messaging_Queue)
# #====================================================================
parquet {
	# # Parquet compress type.
	# #
	# # Value: uncompressed | snappy | gzip | brotli | zstd | lz4
	compress = zstd
	# # The dir for parquet files.
	# #
	# # Value: Folder
	dir = "./parquet"
	# # The prefix of parquet files written.
	# #
	# # Value: string
	file_name_prefix = "nanomq"
	# # Maximum rotation count of parquet files.
	# #
	# # Value: Number
	# # Default: 5
	file_count = 10
	# # The max size of parquet file written.
	# #
	# # Default: 10M
	# # Value: Number
	# # Supported Unit: KB | MB | GB
	file_size = 100MB
	# # The max number of searches per second.
	# #
	# # Default: 5
	# # Value: Number
	limit_frequency = 5
}
